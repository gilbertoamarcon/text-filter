#!/usr/bin/env python


import argparse
import re

PROB = r'((?:problem \d+)|(?:problems \d+ and \d+)|(?:problems (?:\d+, )+and \d+))'
PRESENTED = r'(as (?:presented|shown) in .*)'
AUTOREF = r'(\\autoref\{[^}]+\})'
GENERAL = r'(.*)'
FMAX = r'(\$f_\{max\} = \d\.\d{2}\$)'
INT = r'(\d+)'


MIX = {
	'prob-failed': {
		'keys': (GENERAL,PROB,PRESENTED),
		'templates': [
			r'%s failed to generate valid plans for %s, %s',
			r'%s generated no valid plans for %s, %s',
			r'%s did not generate valid plans for %s, %s',
			r'No valid plans were generated by %s for %s, %s',
		],
	},
	'prob-succeeded': {
		'keys': (GENERAL,PROB,PRESENTED),
		'templates': [
			r'%s solved %s for all coalitions, %s',
			r'%s generated valid plans for %s for all coalitions, %s',
			r'Valid plans were generated by %s for %s, %s',
		],
	},
	'prob-both': {
		'keys': (GENERAL,PROB,PROB,PRESENTED),
		'templates': [
			r'%s did not generate valid plans for %s and solved %s for all coalitions, %s',
			r'%s failed to generate valid plans for %s and generated valid plans for %s for all coalitions, %s',
			r'%s generated no valid plans for %s and solved %s for all coalitions, %s',
			r'%s did not generate valid plans for %s and generated valid plans for %s for all coalitions, %s',
			r'%s failed to generate valid plans for %s and solved %s for all coalitions, %s',
			r'%s generated no valid plans for %s and generated valid plans for %s for all coalitions, %s',
		],
	},
	'succ-count-fail': {
		'keys': (FMAX,INT,INT,PRESENTED),
		'templates': [
			r'All %s heuristics failed to produce a valid plan for %s out of the 100 problems, i.e., at least one heuristic succeeded in producing a valid plan for %s out of the 100 problems, %s',
			r'All %s heuristics failed to generate a valid plan for %s out of the 100 problems, i.e., at least one heuristic succeeded in producing a valid plan for %s out of the 100 problems, %s',
			r'All %s heuristics failed to produce a valid plan for %s out of the 100 problems, i.e., at least one heuristic succeeded in generating a valid plan for %s out of the 100 problems, %s',
			r'All %s heuristics failed to generate a valid plan for %s out of the 100 problems, i.e., at least one heuristic succeeded in generating a valid plan for %s out of the 100 problems, %s',
		],
	},
	'succ-count-succ': {
		'keys': (FMAX,INT,INT,PRESENTED),
		'templates': [
			r'All %s heuristics succeeded in generating a valid plan for %s out of the 100 problems, i.e., at least one heuristic failed to produce a valid plan for %s out of the 100 problems, %s',
			r'All %s heuristics succeeded in producing a valid plan for %s out of the 100 problems, i.e., at least one heuristic failed to produce a valid plan for %s out of the 100 problems, %s',
			r'All %s heuristics succeeded in generating a valid plan for %s out of the 100 problems, i.e., at least one heuristic failed to generate a valid plan for %s out of the 100 problems, %s',
			r'All %s heuristics succeeded in producing a valid plan for %s out of the 100 problems, i.e., at least one heuristic failed to generate a valid plan for %s out of the 100 problems, %s',
		],
	},
}

REPT = {
	'autoref': [
			r'as presented in',
			r'as shown in',
			r'as displayed in',
		],
}




def acro_ref(data):
	pattern = r'((?:(?!and)(?!The)(?!the)(?:\b\w+\b)[-\s]*)+)\s+\((\w+)\s+[\d\.]+\)'
	print 'acro_ref:'
	for r in set(re.findall(pattern, data)):
		if ''.join([w[0] for w in re.findall(r'(\w+)', r[0])]) != r[1]:
			print '\t'+r

def serial_comma(data):
	pattern = r'((?:[^,\s]+, +)+[^,\s]+ +and +[^,\s])'
	print 'serial_comma:'
	for r in set(re.findall(pattern, data)):
		print '\t'+r

def mix(data,base=False):
	for mode in MIX.values():
		# for t in mode['templates']:
		# 	print t%mode['keys']
		for i,m in enumerate([{'template':t,'matches':m} for t in mode['templates'] for m in re.findall((t%mode['keys']),data)]):
			original = m['template']%m['matches']
			new = mode['templates'][0 if base else i%len(mode['templates'])]%m['matches']
			new = new.replace(' The',' the')
			data = data.replace(original,new)
	return data

def rept(data,base=False):
	for mode in REPT.values():
		for t in mode:
			data = data.replace(t,mode[0])
		pattern = (r'(?:(?:'+mode[0]+r')((?:(?!'+mode[0]+r')[\S\s])+))')*len(mode)
		data = re.sub(pattern,''.join('%s\\%d'%(e,i+1) for i,e in enumerate(mode)),data)
	return data

def filter(filename):
	print 'File %s:'%filename

	with open(filename,'r') as f:
		data = f.read()
		acro_ref(data)
		serial_comma(data)
		data = mix(data,base=True)
		data = mix(data)
		data = rept(data)

	with open(filename,'w') as f:
		f.write(data)

def main():

	# Parsing user input
	parser = argparse.ArgumentParser()
	parser.add_argument(
			'-i','--inputs',
			nargs='*',
			required=True,
			help='Input file names.'
		)
	args = parser.parse_args()

	for f in args.inputs:
		filter(filename=f)






if __name__ == "__main__":
	main()
